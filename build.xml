<?xml version ="1.0"?>

<!--L
  Copyright Washington University in St. Louis, SemanticBits, Persistent Systems, Krishagni.

  Distributed under the OSI-approved BSD 3-Clause License.
  See http://ncip.github.com/wustl-common-package/LICENSE.txt for details.
L-->

<!--Ant Script for create Build for Common package-->
<project name="CommonPackage" default="compile">
	<!--define require dir and Properties -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="./lib/ant-contrib.jar" />
		</classpath>
	</taskdef>
	<property file="commonpackage.properties"/>
	<!--define require dir and Properties -->
	<property name="base.dir" value="." />
	<property file="${base.dir}/test/junitConf.properties"/>
	<property name="src.dir" value="${base.dir}/src" />
	<property name="test.dir" value="${base.dir}/test" />
	<property name="test.src.dir" value="${test.dir}/src" />
	<property name="target.dir" value="${base.dir}/classes" />
	<property name="lib.dir" value="${base.dir}/lib" />
	<property name="test.lib.dir" value="${base.dir}/test/lib" />
	<property name="build.dir" value="${base.dir}/build" />
	<property name="extra_lib.dir" value="${base.dir}/extra_lib" />
	<property name="test.unit.src.dir" value="${test.dir}/unit" />
	<property name="generateforce" value="true" />
	<property name="junit.dir" value="${base.dir}/junit" />
	<property name="junit.report.dir" value="${junit.dir}/reports" />
	<property name="junit.classes.dir" value="${junit.dir}/classes" />
	<property name="code.coverage.report.dir" value="${junit.dir}/coverage-reports" />
	<property name="instrumented.classes.dir" value="${junit.dir}/instrumented-classes" />
	<property name="cobertura.home" value="${base.dir}/cobertura"/>
	<property name="cobertura.lib" value="${cobertura.home}/lib"/>
	<property name="metadatatest.dir" value="${base.dir}/metadataTestReport" />
	<property name="metadatatest.report.dir" value="${metadatatest.dir}/Report" />
	<property name="oracle.driver.string" value="oracle.jdbc.driver.OracleDriver" />
	<property name="mysql.driver.string" value="org.gjt.mm.mysql.Driver" />
<!--
	<loadfile property="dist.revision" srcFile="./.svn/entries">
		<filterchain>
			<headfilter lines="1" skip="4"/>
		</filterchain>
	</loadfile>
-->
	<path id="app.classpath">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="xdoclet.classpath">
		<path refid="app.classpath" />
		<pathelement location="${extra_lib.dir}/commons-net-1.2.2.jar" />
		<pathelement location="${extra_lib.dir}/hibernate-tools.jar" />
		<pathelement location="${extra_lib.dir}/servlet-api.jar" />
		<pathelement location="${extra_lib.dir}/xdoclet-1.2.3.jar" />
		<pathelement location="${extra_lib.dir}/xdoclet-hibernate-module-1.2.jar" />
		<pathelement location="${extra_lib.dir}/xdoclet-xdoclet-module-1.2.jar" />
		<pathelement location="${extra_lib.dir}/xerces.jar" />
		<pathelement location="${extra_lib.dir}/xjavadoc-1.1-j5-v4.jar" />
		<pathelement location="${extra_lib.dir}/xsdlib.jar" />
		<pathelement location="${test.dir}" />
	</path>



	<!--	<path id="junit.classpath">		
		<pathelement location="${cobertura.home}/cobertura.jar" />
		<pathelement location="${cobertura.lib}/jakarta-oro-2.0.8.jar" />
		<pathelement location="${cobertura.lib}/asm-2.2.1.jar" />
		<pathelement location="${lib.dir}/log4j.jar" />
	</path>
-->
	<!-- sub tasks -->
	<target name="init">
		<!-- Create the build directory structure used by compile -->
		<delete dir="${target.dir}" failonerror="false"/>
		<mkdir dir="${target.dir}" />
		<mkdir dir="${build.dir}" />
		<delete dir="${junit.dir}" failonerror="false"/>
		<mkdir dir="${junit.dir}" />
		<delete dir="${junit.classes.dir}" failonerror="false"/>
		<mkdir dir="${junit.classes.dir}" />
	</target>

	<!-- Compile all files -->
	<target name="compile" depends="init">
		<javac destdir="${target.dir}" includes="**/*.*" debug="on" includeAntRuntime="false" target="1.8">
			<src path="${src.dir}" />
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${test.lib.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
		<copy todir="${target.dir}">
			<fileset dir="${src.dir}">
				<include name="**/schedulerTag.txt" />
				<include name="**/*.properties" />
				<include name="**/*.xml"/>
				<include name="**/*.hbm.xml" />
				<include name="**/*.ser" />
				<include name="**/*.vm" />
				<exclude name="**/cab2b.properties"/>
				
			</fileset>
		</copy>
 
	</target>

	<!-- compile all test classes-->
	<target name="compileTest">
		<javac destdir="${junit.classes.dir}" includes="**/*.*" debug="on" includeAntRuntime="false" target="1.5">
			<src path="${test.unit.src.dir}" />
			<classpath>
				<fileset dir="${test.lib.dir}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${lib.dir}">
					<include name="*.jar" />
				</fileset>
				<pathelement location="${target.dir}" />
			</classpath>
		</javac>
		<copy todir="${junit.classes.dir}">
			<fileset dir="${test.unit.src.dir}">
			</fileset>
		</copy>
	</target>
	<!--Create zip file of common package source files.-->
	<target name="build_code_zip" depends="compile">
		<delete>
			<fileset dir="${build.dir}" includes="**/*" />
		</delete>
		<zip destfile="${build.dir}/commonpackage-${cp.jar.version}-src.zip">
			<fileset dir="${src.dir}" includes="**/*" />
			 
		</zip>
	</target>

	<target name="build_jar" depends="build_code_zip,compile">
		<tstamp />
		<jar taskname="build_jar" jarfile="${build.dir}/commonpackage-${cp.jar.version}.jar">
			<fileset dir="${target.dir}">
				<include name="**/*" />
				<exclude name="**/SqlGeneratorTestCase*" />
				<exclude name="**/ExpressionTestCases*" />
				<exclude name="**/JoinGraphTestCase*" />
				<exclude name="**/CSMGroupConf.xml" />
				<exclude name="**/Factory.xml" />
				<exclude name="**/ApplicationResources.properties" />
			</fileset>
		 
			<fileset dir="${base.dir}" includes="**/ExceptionFormatter.properties" />
			<manifest>
				<section name="${cp.jar.details}">
					<attribute name="Version" value="${cp.jar.version}"/>
					<attribute name="Built-By" value="${cp.jar.creator}" />
					<attribute name="Build-on" value="${TODAY} ${TSTAMP}" />
					<!--
					<attribute name="SVN-URL" value="${dist.revision}" />
					-->
				</section>
			</manifest>
		</jar>
	</target>
	<target name="initJunit">
		<delete failonerror="false">
			<fileset dir="${junit.report.dir}" includes="**/*" />
		</delete>
		<mkdir dir="${junit.report.dir}" />
		<mkdir dir="${junit.report.dir}/Html_reports" />
	</target>
	<!-- copy all jar files to junit/lib folder-->
	<target name="copyJarsToJunitLib">
		<mkdir dir="${junit.dir}/lib" />
		<copy todir="${junit.dir}/lib">
			<fileset dir="${base.dir}/lib">
				<include name="**/*.jar" />
			</fileset>
		</copy>
		<copy todir="${junit.dir}/lib" file="${build.dir}/commonpackage.jar" failonerror="false"/>
	</target>
	<!-- Create junit report-->
	<target name="createJunitReport" >
		<junitreport todir="${reports.xml.dir}">
			<fileset dir="${reports.xml.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${reports.html.dir}" />
		</junitreport>
	</target>
	<!-- run junit test cases-->
	<!--	<taskdef classpathref="junit.classpath" resource="tasks.properties" /> -->
	<path id="test.classpath">
		<pathelement location="${junit.classes.dir}" />
		<pathelement location="${target.dir}" />
		<pathelement location="${test.lib.dir}" />
		<pathelement location="${test.src.dir}" />
		<fileset dir="${test.lib.dir}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
	</path>
	<!--		
		<target name="runJunitTestCases" depends="build_jar,compileTest,copyJarsToJunitLib">
			<antcall target="initJunit" />
			<junit printsummary="yes" haltonerror="no" haltonfailure="no" fork="yes" >
						<formatter type="xml" />
			    <classpath refid="test.classpath"/>
				      <batchtest todir="${junit.report.dir}/Html_reports">
				        <fileset dir="${junit.classes.dir}" includes="**/Test*.class" />
				      </batchtest>
				
			  </junit>
			<antcall target="createJunitReport" />
			<antcall target="clean-compile-test" />
		</target>
-->
	<target name="runJunitTestCases" depends="build_jar,compileTest,copyJarsToJunitLib">
		<antcall target="initJunit" />
		<junit printsummary="yes" haltonerror="no" haltonfailure="no" fork="yes" >
			<!--Added For cobertura -->
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${reports.dir}/basic_coverage.ser" />
			<classpath location="${instrumented.dir}" />
			<classpath location="${target.dir}" />

			<classpath refid="test.classpath"/>
			<!--Defibe covertura classpath-->
			<classpath refid="cobertura_classpath" />
			<formatter type="xml" />
			<test name="${testcase}" todir="${reports.xml.dir}" if="testcase" />

			<batchtest todir="${reports.xml.dir}">
				<fileset dir="${junit.classes.dir}" includes="**/Test*.class" />
			</batchtest>

		</junit>
		<antcall target="createJunitReport" />
		<antcall target="clean-compile-test" />
	</target>
	<target name="clean-compile-test">
		<delete verbose="yes">
			<fileset dir="${junit.classes.dir}" includes="**/*.class" />
		</delete>
	</target>

	<target name="junitForCobertura" depends="compileTest,copyJarsToJunitLib">
		<antcall target="initJunit"/>
		<junit printsummary="yes" haltonerror="no" haltonfailure="no" fork="yes">
			<formatter type="xml" />
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${base.dir}/cobertura.ser" />
			<batchtest todir="${junit.report.dir}/Html_reports">
				<fileset dir="${test.src.dir}">
					<include name="**/TestAll.java"/>
				</fileset>
			</batchtest>
			<classpath location="${instrumented.classes.dir}" />
			<classpath location="${target.dir}" />

			<classpath>
				<pathelement location="${junit.classes.dir}" />
				<pathelement location="${cobertura.home}/cobertura.jar" />
				<fileset dir="${junit.dir}/lib">
					<include name="*.jar" />
					<exclude name="inscommonpackage.jar"/>
					<exclude name="commonpackage-1.1.5.jar"/>
				</fileset>

			</classpath>
		</junit>
		<antcall target="createJunitReport" />
	</target>

	<target name="create_instrumented_jar">
		<delete file="${build.dir}/inscommonpackage.jar" failonerror="false"/>
		<jar taskname="build_jar" jarfile="${build.dir}/inscommonpackage.jar">
			<fileset dir="${instrumented.classes.dir}">
				<include name="**/*" />
			</fileset>
			<fileset dir="${base.dir}" includes="**/ExceptionFormatter.properties" />
			<manifest>
				<attribute name="Built-At-Time" value="${TODAY} ${TSTAMP}" />
			</manifest>
		</jar>
	</target>

	<!-- Instrument all classes-->
	<target name="instrument">
		<mkdir dir="${code.coverage.report.dir}" />
		<mkdir dir="${instrumented.classes.dir}" />
		<cobertura-instrument todir="${instrumented.classes.dir}" >
			<ignore regex="org.apache.log4j.*" />
			<fileset dir="${target.dir}">
				<include name="**/*.class" />
				<exclude name="**/*Test.class" />
				<exclude name="**/Mock*.class" />
			</fileset>
		</cobertura-instrument>
		<copy todir="${instrumented.classes.dir}">
			<fileset dir="${src.dir}">
				<include name="**/*.properties" />
				<include name="**/*.xml" />
				<include name="**/*.hbm.xml" />
				<include name="**/*.ser" />
				<exclude name="**/cab2b.properties"/>
			</fileset>
		</copy>
		<antcall target="create_instrumented_jar" />
		<delete file="${build.dir}/commonpackage.jar" failonerror="false"/>
		<copy todir="${junit.dir}/lib" file="${build.dir}/inscommonpackage.jar"/>
	</target>

	<!-- Target to generate cobertura coverage report-->
	<target name="cobertura_report">
		<cobertura-report srcdir="${src.dir}" destdir="${code.coverage.report.dir}" format="xml" />
		<delete file="${instrumented.classes.dir}/cobertura.ser" />
	</target>

	<!-- Target to run junit test cases and generate cobertura coverage report-->
	<target name="run_nightly_build" depends="compile,databasSetup">
		<antcall target="instrument" />
		<antcall target="junitForCobertura" />
		<antcall target="cobertura_report" />
	</target>

	<target name="build_exception_jar" depends="compile">
		<tstamp />
		<jar taskname="build_jar" jarfile="${build.dir}/commonpkgexcepion.jar">
			<fileset dir="${target.dir}">
				<include name="**/edu/wustl/common/exception/*" />
			</fileset>
			<manifest>
				<attribute name="Built-At-Time" value="${TODAY} ${TSTAMP}" />
			</manifest>
		</jar>
	</target>

	<property name="applet.dir" value="${base.dir}/Applet" />
	<!-- Compile all files, generated and hand-written -->
	<target name="applet_compile" depends="init">
		<delete>
			<fileset dir="${applet.dir}">
				<exclude name="**/CVS*" />
				<exclude name="**/java.policy.applet*" />
			</fileset>
		</delete>

		<javac destdir="${applet.dir}" includeAntRuntime="false" fork="yes" executable="C:/Program Files/Java/jdk1.5.0_05/bin/javac" compiler="javac1.5">
			<src path="${src.dir}" />

			<include name="**/edu/wustl/common/tree/*.java" />
			<include name="**/edu/wustl/common/treeApplet/*.java" />
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
	</target>

	<!-- Create the Applet JAR Begins-->
	<target name="AppletJAR" depends="applet_compile">

		<delete>
			<fileset dir="${applet.dir}">
				<include name="**/*.jar" />
			</fileset>
		</delete>

		<copy todir="${applet.dir}/images">
			<fileset dir="${base.dir}/images">
				<include name="**/*" />
			</fileset>
		</copy>

		<jar taskname="buildJar" jarfile="${applet.dir}/TreeApplet.jar">
			<manifest>
				<attribute name="Class-Path" value="swingx-2006_10_08.jar" />
			</manifest>
			<fileset dir="${applet.dir}">
				<exclude name="**/CVS*" />
				<exclude name="**/java.policy.applet*" />
			</fileset>
		</jar>
	</target>
	<!-- Create the Applet JAR Ends-->

	<target name="databasSetup">
		<if>
			<equals arg1="mysql" arg2="${database.type}"/>
			<then>
				<antcall target="databasSetup_mysql"/>
			</then>
			<elseif>
				<equals arg1="oracle" arg2="${database.type}"/>
				<then>
					<antcall target="databasSetup_oracle"/>
				</then>
			</elseif>
		</if>
	</target>

	<target name="databasSetup_mysql">
		<echo message="Database set up for mysql..."/>
		<sql driver="${mysql.driver.string}" url="jdbc:mysql://${database.host}:${database.port}/${database.name}" userid="${database.username}" password="${database.password}" >
			<transaction src="${base.dir}/SQL/MySQL/createUser.sql" />
			<transaction>commit;</transaction>
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</sql>
	</target>

	<target name="databasSetup_oracle">
		<sql driver="${oracle.driver.string}" url="jdbc:oracle:thin:@${database.host}:${database.port}:${database.name}" userid="${database.username}" password="${database.password}" rdbms="oracle">
			<transaction src="${base.dir}/SQL/Oracle/createUser.sql" />
			<transaction>commit;</transaction>
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</sql>
	</target>



	<!--
	     code coverage using cobertura
	-->
	<property file="cobertura.properties"/>

	<path id="cobertura_classpath">
		<fileset dir="${cobertura.dir}">
			<include name="cobertura.jar" />
			<include name="lib/**/*.jar" />
		</fileset>
	</path>
	<taskdef classpathref="cobertura_classpath" resource="tasks.properties"/>

	<target name="cobertura-init">
		<mkdir dir="${instrumented.dir}" />
		<mkdir dir="${reports.dir}" />
		<mkdir dir="${reports.xml.dir}" />
		<mkdir dir="${reports.html.dir}" />
		<mkdir dir="${coverage.xml.dir}" />
		<mkdir dir="${coverage.html.dir}" />
	</target>

	<target name="make-cobertura-instrument">
		<delete file="${reports.dir}/basic_coverage.ser"/>
		<delete dir="${instrumented.dir}" />

		<cobertura-instrument datafile="${reports.dir}/basic_coverage.ser" todir="${instrumented.dir}">
			<ignore regex="org.apache.log4j.*" />
			<fileset dir="${target.dir}">
				<include name="**/*.class" />
				<exclude name="**/*Test.class" />
			</fileset>
		</cobertura-instrument>
	</target>

	<target name="cobertura-coverage-report">
		<cobertura-report datafile="${reports.dir}/basic_coverage.ser" srcdir="${src.dir}" destdir="${coverage.xml.dir}" format="xml" />
		<cobertura-report datafile="${reports.dir}/basic_coverage.ser" srcdir="${src.dir}" destdir="${coverage.html.dir}" />
	</target>

	<target name="cobertura-coverage" depends="cobertura-init, compile, make-cobertura-instrument, runJunitTestCases, cobertura-coverage-report" />

</project>
